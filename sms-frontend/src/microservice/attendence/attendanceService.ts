// src/api/attendanceService.ts

import axios, { AxiosResponse } from "axios";

// Base URL for the attendance microservice API (ensure this uses HTTPS in production)
const API_BASE_URL = "https://api.example.com";

/**
 * AttendanceRecord Interface
 * Defines the structure for an attendance record.
 */
export interface AttendanceRecord {
  id: number;         // Unique identifier for the attendance record
  studentId: number;  // Identifier for the student
  date: string;       // Date of the attendance (ISO formatted string)
  status: string;     // Attendance status (e.g., "Present", "Absent", "Late")
  courseId: number;   // Identifier for the course
}

/**
 * getAttendanceRecords
 *
 * Securely fetch attendance records from the attendance microservice.
 *
 * @param token - Authentication token for secure API access.
 * @param params - Optional query parameters for filtering records.
 * @returns Promise resolving to an array of AttendanceRecord.
 */
export const getAttendanceRecords = async (
  token: string,
  params?: { [key: string]: string | number | boolean }
): Promise<AttendanceRecord[]> => {
  try {
    // Make an HTTPS GET request to fetch attendance records.
    const response: AxiosResponse<AttendanceRecord[]> = await axios.get(
      `${API_BASE_URL}/attendance`,
      {
        headers: {
          "Authorization": `Bearer ${token}`,  // Securely pass the token
          "Content-Type": "application/json",
        },
        params,
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error creating attendance record:", error.response?.data || error.message);
    } else {
      console.error("Unexpected error:", error);
    }
    // Log the error for debugging while returning a generic error message.
    console.error("Error fetching attendance records:", error);
    throw new Error("Unable to fetch attendance records. Please try again later.");
  }
};

/**
 * updateAttendanceRecord
 *
 * Securely update the attendance status for a specific record.
 *
 * @param token - Authentication token for secure API access.
 * @param recordId - ID of the attendance record to update.
 * @param data - Partial payload containing updated attendance fields.
 * @returns Promise resolving to the updated AttendanceRecord.
 */
export const updateAttendanceRecord = async (
  token: string,
  recordId: number,
  data: Partial<AttendanceRecord>
): Promise<AttendanceRecord> => {
  try {
    // Make an HTTPS PUT request to update the attendance record.
    const response: AxiosResponse<AttendanceRecord> = await axios.put(
      `${API_BASE_URL}/attendance/${recordId}`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error creating attendance record:", error.response?.data || error.message);
    } else {
      console.error("Unexpected error:", error);
    }
    console.error(`Error updating attendance record with ID ${recordId}:`, error);
    throw new Error("Unable to update attendance record. Please try again later.");
  }
};

/**
 * createAttendanceRecord
 *
 * Securely create a new attendance record.
 *
 * @param token - Authentication token for secure API access.
 * @param data - Payload for the new attendance record (excluding the ID, which is generated by the backend).
 * @returns Promise resolving to the newly created AttendanceRecord.
 */
export const createAttendanceRecord = async (
  token: string,
  data: Omit<AttendanceRecord, "id">
): Promise<AttendanceRecord> => {
  try {
    // Make an HTTPS POST request to create a new attendance record.
    const response: AxiosResponse<AttendanceRecord> = await axios.post(
      `${API_BASE_URL}/attendance`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error creating attendance record:", error.response?.data || error.message);
    } else {
      console.error("Unexpected error:", error);
    }
    throw new Error("Unable to create attendance record. Please try again later.");
  }
};
