// src/api/studentService.ts

import axios, { AxiosResponse } from "axios";

// Base URL for the student microservice API. Ensure this endpoint uses HTTPS in production.
const API_BASE_URL = "https://api.example.com";

/**
 * Student Interface
 * Defines the structure for a student record.
 */
export interface Student {
  id: number;            // Unique identifier for the student (generated by the backend)
  firstName: string;     // Student's first name
  lastName: string;      // Student's last name
  email: string;         // Student's email address
  // Additional fields can be added (e.g., major, enrollmentStatus, etc.)
}

/**
 * getStudents
 *
 * Securely fetch a list of students from the student microservice.
 *
 * @param token - Authentication token for secure API access.
 * @param params - Optional query parameters for filtering or pagination.
 * @returns Promise resolving to an array of Student records.
 */
export const getStudents = async (
  token: string,
  params?: Record<string, string | number | boolean>
): Promise<Student[]> => {
  try {
    const response: AxiosResponse<Student[]> = await axios.get(
      `${API_BASE_URL}/students`,
      {
        headers: {
          "Authorization": `Bearer ${token}`,  // Securely pass the token in the header.
          "Content-Type": "application/json",
        },
        params, // Optional parameters for filtering or pagination.
      }
    );
    return response.data;
  } catch (error: unknown) {
    console.error("Error fetching students:", error);
    throw new Error("Unable to fetch students. Please try again later.");
  }
};

/**
 * getStudentById
 *
 * Securely fetch a single student record by its ID.
 *
 * @param token - Authentication token for secure API access.
 * @param studentId - ID of the student to retrieve.
 * @returns Promise resolving to the Student record.
 */
export const getStudentById = async (
  token: string,
  studentId: number
): Promise<Student> => {
  try {
    const response: AxiosResponse<Student> = await axios.get(
      `${API_BASE_URL}/students/${studentId}`,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error fetching student with ID ${studentId}:`, error.message);
    } else {
      console.error(`Unexpected error fetching student with ID ${studentId}:`, error);
    }
    throw new Error("Unable to fetch student details. Please try again later.");
  }
};

/**
 * updateStudent
 *
 * Securely update an existing student record.
 *
 * @param token - Authentication token for secure API access.
 * @param studentId - ID of the student to update.
 * @param data - Partial payload containing updated student fields.
 * @returns Promise resolving to the updated Student record.
 */
export const updateStudent = async (
  token: string,
  studentId: number,
  data: Partial<Student>
): Promise<Student> => {
  try {
    const response: AxiosResponse<Student> = await axios.put(
      `${API_BASE_URL}/students/${studentId}`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error updating student with ID ${studentId}:`, error.message);
    } else {
      console.error(`Unexpected error updating student with ID ${studentId}:`, error);
    }
    throw new Error("Unable to update student. Please try again later.");
  }
};

/**
 * createStudent
 *
 * Securely create a new student record.
 *
 * @param token - Authentication token for secure API access.
 * @param data - Payload for the new student record (excluding the ID, which is generated by the backend).
 * @returns Promise resolving to the newly created Student record.
 */
export const createStudent = async (
  token: string,
  data: Omit<Student, "id">
): Promise<Student> => {
  try {
    const response: AxiosResponse<Student> = await axios.post(
      `${API_BASE_URL}/students`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error creating student:", error.message);
    } else {
      console.error("Unexpected error creating student:", error);
    }
    throw new Error("Unable to create student. Please try again later.");
  }
};

/**
 * deleteStudent
 *
 * Securely delete a student record by its ID.
 *
 * @param token - Authentication token for secure API access.
 * @param studentId - ID of the student to delete.
 * @returns Promise resolving when the student is successfully deleted.
 */
export const deleteStudent = async (
  token: string,
  studentId: number
): Promise<void> => {
  try {
    await axios.delete(`${API_BASE_URL}/students/${studentId}`, {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error deleting student with ID ${studentId}:`, error.message);
    } else {
      console.error(`Unexpected error deleting student with ID ${studentId}:`, error);
    }
    throw new Error("Unable to delete student. Please try again later.");
  }
};
