// src/api/timetableService.ts

import axios, { AxiosResponse } from "axios";

// Base URL for the timetable microservice API.
// Ensure this endpoint uses HTTPS in production.
const API_BASE_URL = "https://api.example.com";

/**
 * TimetableEntry Interface
 * Defines the structure for a timetable entry.
 */
export interface TimetableEntry {
  id: number;         // Unique identifier for the timetable entry
  day: string;        // Day of the week (e.g., "Monday")
  course: string;     // Course name or code associated with the timetable entry
  instructor: string; // Name of the instructor for the course
  startTime: string;  // Start time of the class (e.g., "09:00 AM")
  endTime: string;    // End time of the class (e.g., "10:30 AM")
  location: string;   // Location of the class (e.g., "Room 101")
}

/**
 * getTimetableRecords
 *
 * Securely fetch timetable entries from the timetable microservice.
 *
 * @param token - Authentication token for secure API access.
 * @param params - Optional query parameters for filtering or pagination.
 * @returns Promise resolving to an array of TimetableEntry records.
 */
export const getTimetableRecords = async (
  token: string,
  params?: Record<string, string | number | boolean>
): Promise<TimetableEntry[]> => {
  try {
    // Make a secure HTTPS GET request to fetch timetable records.
    const response: AxiosResponse<TimetableEntry[]> = await axios.get(
      `${API_BASE_URL}/timetable`,
      {
        headers: {
          "Authorization": `Bearer ${token}`, // Secure token authentication
          "Content-Type": "application/json",
        },
        params, // Optional query parameters
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error fetching timetable records:", error.message);
    } else {
      console.error("Unexpected error fetching timetable records:", error);
    }
    throw new Error("Unable to fetch timetable records. Please try again later.");
  }
};

/**
 * updateTimetableRecord
 *
 * Securely update an existing timetable entry.
 *
 * @param token - Authentication token for secure API access.
 * @param recordId - ID of the timetable entry to update.
 * @param data - Partial payload containing updated fields for the timetable entry.
 * @returns Promise resolving to the updated TimetableEntry record.
 */
export const updateTimetableRecord = async (
  token: string,
  recordId: number,
  data: Partial<TimetableEntry>
): Promise<TimetableEntry> => {
  try {
    // Make a secure HTTPS PUT request to update the timetable record.
    const response: AxiosResponse<TimetableEntry> = await axios.put(
      `${API_BASE_URL}/timetable/${recordId}`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`, // Secure token authentication
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error updating timetable record with ID ${recordId}:`, error.message);
    } else {
      console.error(`Unexpected error updating timetable record with ID ${recordId}:`, error);
    }
    throw new Error("Unable to update timetable record. Please try again later.");
  }
};

/**
 * createTimetableRecord
 *
 * Securely create a new timetable entry.
 *
 * @param token - Authentication token for secure API access.
 * @param data - Payload for the new timetable entry (excluding the ID, which is generated by the backend).
 * @returns Promise resolving to the newly created TimetableEntry record.
 */
export const createTimetableRecord = async (
  token: string,
  data: Omit<TimetableEntry, "id">
): Promise<TimetableEntry> => {
  try {
    // Make a secure HTTPS POST request to create a new timetable record.
    const response: AxiosResponse<TimetableEntry> = await axios.post(
      `${API_BASE_URL}/timetable`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`, // Secure token authentication
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error creating timetable record:", error.message);
    } else {
      console.error("Unexpected error creating timetable record:", error);
    }
    throw new Error("Unable to create timetable record. Please try again later.");
  }
};

/**
 * deleteTimetableRecord
 *
 * Securely delete a timetable entry by its ID.
 *
 * @param token - Authentication token for secure API access.
 * @param recordId - ID of the timetable entry to delete.
 * @returns Promise resolving when the timetable record is successfully deleted.
 */
export const deleteTimetableRecord = async (
  token: string,
  recordId: number
): Promise<void> => {
  try {
    // Make a secure HTTPS DELETE request to remove the timetable record.
    await axios.delete(`${API_BASE_URL}/timetable/${recordId}`, {
      headers: {
        "Authorization": `Bearer ${token}`, // Secure token authentication
        "Content-Type": "application/json",
      },
    });
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error deleting timetable record with ID ${recordId}:`, error.message);
    } else {
      console.error(`Unexpected error deleting timetable record with ID ${recordId}:`, error);
    }
    throw new Error("Unable to delete timetable record. Please try again later.");
  }
};
