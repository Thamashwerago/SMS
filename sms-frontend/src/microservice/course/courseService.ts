// src/api/courseService.ts

import axios, { AxiosResponse } from "axios";

// Base URL for the courses microservice API. Ensure the endpoint uses HTTPS in production.
const API_BASE_URL = "https://api.example.com";

/**
 * Course Interface
 * Defines the structure for a course record.
 */
export interface Course {
  id: number;           // Unique identifier for the course (generated by the backend)
  name: string;         // Name of the course
  description: string;  // Brief description of the course
  instructor: string;   // Name of the instructor for the course
  // Add additional fields as required (e.g., schedule, credits, etc.)
}

/**
 * getCourses
 *
 * Securely fetch a list of courses from the courses microservice.
 *
 * @param token - Authentication token used for secure API access.
 * @param params - Optional query parameters for filtering courses.
 * @returns Promise resolving to an array of Course records.
 */
export const getCourses = async (
  token: string,
  params?: Record<string, string | number | boolean>
): Promise<Course[]> => {
  try {
    const response: AxiosResponse<Course[]> = await axios.get(
      `${API_BASE_URL}/courses`,
      {
        headers: {
          "Authorization": `Bearer ${token}`, // Securely pass the token in the header.
          "Content-Type": "application/json",
        },
        params, // Optional query parameters for filtering or pagination.
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error fetching courses:", error.message);
    } else {
      console.error("Unexpected error fetching courses:", error);
    }
    throw new Error("Unable to fetch courses. Please try again later.");
  }
};

/**
 * getCourseById
 *
 * Securely fetch a single course record by its ID.
 *
 * @param token - Authentication token for secure API access.
 * @param courseId - ID of the course to retrieve.
 * @returns Promise resolving to the Course record.
 */
export const getCourseById = async (
  token: string,
  courseId: number
): Promise<Course> => {
  try {
    const response: AxiosResponse<Course> = await axios.get(
      `${API_BASE_URL}/courses/${courseId}`,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error fetching course with ID ${courseId}:`, error.message);
    } else {
      console.error(`Unexpected error fetching course with ID ${courseId}:`, error);
    }
    console.error(`Error fetching course with ID ${courseId}:`, error);
    throw new Error("Unable to fetch course details. Please try again later.");
  }
};

/**
 * updateCourse
 *
 * Securely update an existing course record.
 *
 * @param token - Authentication token for secure API access.
 * @param courseId - ID of the course to update.
 * @param data - Partial payload containing updated course fields.
 * @returns Promise resolving to the updated Course record.
 */
export const updateCourse = async (
  token: string,
  courseId: number,
  data: Partial<Course>
): Promise<Course> => {
  try {
    const response: AxiosResponse<Course> = await axios.put(
      `${API_BASE_URL}/courses/${courseId}`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error updating course with ID ${courseId}:`, error.message);
    } else {
      console.error(`Unexpected error updating course with ID ${courseId}:`, error);
    }
    throw new Error("Unable to update course. Please try again later.");
  }
};

/**
 * createCourse
 *
 * Securely create a new course record.
 *
 * @param token - Authentication token for secure API access.
 * @param data - Payload for the new course (excluding the ID, which is generated by the backend).
 * @returns Promise resolving to the newly created Course record.
 */
export const createCourse = async (
  token: string,
  data: Omit<Course, "id">
): Promise<Course> => {
  try {
    const response: AxiosResponse<Course> = await axios.post(
      `${API_BASE_URL}/courses`,
      data,
      {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("Error creating course:", error.message);
    } else {
      console.error("Unexpected error creating course:", error);
    }
    throw new Error("Unable to create course. Please try again later.");
  }
};

/**
 * deleteCourse
 *
 * Securely delete a course record by its ID.
 *
 * @param token - Authentication token for secure API access.
 * @param courseId - ID of the course to delete.
 * @returns Promise resolving when the course is successfully deleted.
 */
export const deleteCourse = async (
  token: string,
  courseId: number
): Promise<void> => {
  try {
    await axios.delete(`${API_BASE_URL}/courses/${courseId}`, {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error(`Error deleting course with ID ${courseId}:`, error.message);
    } else {
      console.error(`Unexpected error deleting course with ID ${courseId}:`, error);
    }
    throw new Error("Unable to delete course. Please try again later.");
  }
};
